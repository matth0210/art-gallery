.homeContainer {
  display: flex;
  flex-direction: column;
  height: 100vh;
}

.navContainer {
  display: flex;
  justify-content: center;
}

.nav {
  width: 100%;
  margin-top: 15px;
}

.nav-tabs > li {
    float:none;
    display:inline-block;
    zoom:1;
}

.nav-tabs {
  justify-content: center;
}

.homeRouterContainer {
  display: flex;
  justify-content: space-evenly;
  flex-grow: 1;
}

.contentArea {
  max-width: 1850px;
  flex-grow: 1;
}

/*
  I'm pretty familiar with flexboxes, but I used this resource to get a better idea
  how to do a nice photo grid. It was important to me to not make the photos all be the same
  size, so I used this column flexbox structure to achieve that. As a result only 28 images
  are technically shown at a time so the columns are more even.
  https://www.w3schools.com/howto/howto_css_image_grid_responsive.asp
*/
.row {
  display: flex;
  flex-wrap: wrap;
  padding: 0 .5rem;
  margin: 0px;
}

/* Create four equal columns that sits next to each other */
.column {
  flex: 25%;
  max-width: 25%;
  padding: 0 .5rem;
}

.column img {
  margin-top: 1rem;
  vertical-align: middle;
  width: 100%;
}

/* Responsive layout - makes a two column-layout instead of four columns */
@media screen and (max-width: 800px) {
  .column {
    flex: 50%;
    max-width: 50%;
  }
}

/* Responsive layout - makes the two columns stack on top of each other instead of next to each other */
@media screen and (max-width: 600px) {
  .column {
    flex: 100%;
    max-width: 100%;
  }
}